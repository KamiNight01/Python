#!/usr/bin/env python3

def q1(floatstr):
    newlist = []
    nt = floatstr.split(",")
    newlist = nt.append()


    '''
    TLO: 112-SCRPY002, LSA 3,4
    Given the floatstr, which is a comma separated string of
    floats, return a list with each of the floats in the 
    argument as elements in the list.
    '''


    pass
def q2(*args):
    sums = 0
    for i in args:
        sums = float(sums + i)
    avg = sums/len(i)
    return avg


    '''
    TLO: 112-SCRPY006, LSA 3
    TLO: 112-SCRPY007, LSA 4
    Given the variable length argument list, return the average
    of all the arguments as a float
    '''
    pass

def q3(lst,n):
    '''
    TLO: 112-SCRPY004, LSA 3
    Given a list (lst) and a number of items (n), return a new 
    list containing the last n entries in lst.
    '''
    d = []
    d = lst[-n:]
    return d


    pass

def q4(strng):
    '''
    TLO: 112-SCRPY004, LSA 1,2
    TLO: 112-SCRPY006, LSA 3
    Given an input string, return a list containing the ordinal numbers of 
    each character in the string in the order found in the input string.
    
    '''
    d = strng.split()
    return tuple(d)



def q5(strng):
    '''
    TLO: 112-SCRPY002, LSA 1,3
    TLO: 112-SCRPY004, LSA 2
    Given an input string, return a tuple with each element in the tuple
    containing a single word from the input string in order.
    '''

    pass

def q6(catalog, order):

    '''
    TLO: 112-SCRPY007, LSA 2
    Given a dictionary (catalog) whose keys are product names and values are product
    prices per unit and a list of tuples (order) of product names and quantities,
    compute and return the total value of the order.

    Example catalog:
    {
        'AMD Ryzen 5 5600X': 289.99,
        'Intel Core i9-9900K': 363.50,
        'AMD Ryzen 9 5900X': 569.99
    }

    Example order:
    [
        ('AMD Ryzen 5 5600X', 5), 
        ('Intel Core i9-9900K', 3)
    ]

    Example result:
    2540.45 

    How the above result was computed:
    (289.99 * 5) + (363.50 * 3)
    '''

    current_total = 0
    for product, quantity in order:
        current_total += catalog[product]



    pass

def q7(filename):
    with open('filename', 'r') as f:
        t = (f.readline())
        length = len(t[:-1])
        return length


    '''
    TLO: 112-SCRPY005, LSA 1
    Given a filename, open the file and return the length of the first line 
    in the file excluding the line terminator.
    '''

def q8(filename,lst):

    with open('list', 'w') as f:
        for line in f:
            f.write =("%s\n" % line)
            if line == stop.nocase():
               return



    with open('filename', 'r') as f:
    words = f.read().split()
    lst = [word for word in words if 'stop'.nocase()
        return

    '''
    TLO: 112-SCRPY003, LSA 1
    TLO: 112-SCRPY004, LSA 1,2
    TLO: 112-SCRPY005, LSA 1
    Given a filename and a list, write each entry from the list to the file
    on separate lines until a case-insensitive entry of "stop" is found in 
    the list. If "stop" is not found in the list, write the entire list to 
    the file on separate lines.
    '''
    pass
def q9(miltime):
    miltime = int(miltime)
    if miltime  < 1200 :
        return "Good Morning"
    elif 1200 <= miltime < 1600 :
        return "Good afternoon"
    elif 1600 <= miltime < 2100 :
        return "Good Evening"
    elif 2100 <=  miltime < 300 :
        return "Good Night"
    else:
       return "enter valid input"


    '''
    TLO: 112-SCRPY003, LSA 1
    Given the military time in the argument miltime, return a string 
    containing the greeting of the day.
    0300-1159 "Good Morning"
    1200-1559 "Good Afternoon"
    1600-2059 "Good Evening"
    2100-0259 "Good Night"
    '''
    pass

def q10(numlist):
    for i in numlist:
        if i > 0:
            return True
        else:
            return False


    '''
    TLO: 112-SCRPY003, LSA 1
    TLO: 112-SCRPY004, LSA 1
    Given the argument numlist as a list of numbers, return True if all 
    numbers in the list are NOT negative. If any numbers in the list are
    negative, return False.
'''

pass

